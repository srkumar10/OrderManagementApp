<?xml version = "1.0" encoding = "UTF-8" ?>
<!--
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  Oracle JDeveloper BPEL Designer 
  
  Created: Mon Apr 04 20:35:13 EDT 2016
  Author:  ramesh
  Purpose: Synchronous BPEL Process
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-->
<process name="CheckCCLimit"
               targetNamespace="http://xmlns.oracle.com/POApplication/CreditCardValidation/CheckCCLimit"
               xmlns="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
               xmlns:client="http://xmlns.oracle.com/POApplication/CreditCardValidation/CheckCCLimit"
               xmlns:ora="http://schemas.oracle.com/xpath/extension"
               xmlns:bpelx="http://schemas.oracle.com/bpel/extension"
               xmlns:ns1="http://xmlns.oracle.com/POApplication/CreditCardValidation/ValidateCreditCard"
               xmlns:bpws="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
         xmlns:ns2="http://xmlns.oracle.com/pcbpel/adapter/db/POApplication/CreditCardValidation/CreditCardDBService"
         xmlns:bpel2="http://docs.oasis-open.org/wsbpel/2.0/process/executable"
         xmlns:ns4="http://techlabs.local/ns/CCAuthorizationService"
         xmlns:ns3="http://xmlns.oracle.com/pcbpel/adapter/db/top/CreditCardDBService"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xp20="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.Xpath20"
         xmlns:oraext="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.ExtFunc"
         xmlns:dvm="http://www.oracle.com/XSL/Transform/java/oracle.tip.dvm.LookupValue"
         xmlns:hwf="http://xmlns.oracle.com/bpel/workflow/xpath"
         xmlns:ids="http://xmlns.oracle.com/bpel/services/IdentityService/xpath"
         xmlns:bpm="http://xmlns.oracle.com/bpmn20/extensions"
         xmlns:xdk="http://schemas.oracle.com/bpel/extension/xpath/function/xdk"
         xmlns:xref="http://www.oracle.com/XSL/Transform/java/oracle.tip.xref.xpath.XRefXPathFunctions"
         xmlns:ldap="http://schemas.oracle.com/xpath/extension/ldap">

  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      PARTNERLINKS                                                      
      List of services participating in this BPEL process               
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->
  <bpelx:annotation>
    <bpelx:analysis>
      <bpelx:property name="wsdlFile">
        <![CDATA[WSDLs/ValidateCreditCardWrapper.wsdl]]>
      </bpelx:property>
    </bpelx:analysis>
  </bpelx:annotation>
  <partnerLinks>
    <!-- 
      The 'client' role represents the requester of this service. It is 
      used for callback. The location and correlation information associated
      with the client role are automatically set using WS-Addressing.
    -->
    <partnerLink name="checkcclimit_client" partnerLinkType="ns1:CheckCCLimit" myRole="creditcardvalidation"/>
    <partnerLink name="CreditCardDBService"
                 partnerLinkType="ns2:CreditCardDBService_plt"
                 partnerRole="CreditCardDBService_role"/>
  </partnerLinks>

  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      VARIABLES                                                        
      List of messages and XML documents used within this BPEL process 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->
  <variables>
    <!-- Reference to the message passed as input during initiation -->
    <variable name="inputVariable" messageType="ns1:requestMessage"/>

    <!-- Reference to the message that will be returned to the requester-->
    <variable name="outputVariable" messageType="ns1:replyMessage"/>
    <variable name="Invoke_ccservice_CreditCardDBServiceSelect_InputVariable"
              messageType="ns2:CreditCardDBServiceSelect_inputParameters"/>
    <variable name="Invoke_ccservice_CreditCardDBServiceSelect_OutputVariable"
              messageType="ns2:CreditcardsCollection_msg"/>
    <variable messageType="ns1:faultMessage" name="creditFault"/>
  </variables>
  <faultHandlers>
    <catch faultName="ns1:validateCCfault" faultVariable="creditFault">
      <sequence name="Sequence1">
        <assign name="Assign_ccerror">
          <copy>
            <from expression="concat('Error: Order total exceeds the credit limit of ', bpws:getVariableData('Invoke_ccservice_CreditCardDBServiceSelect_OutputVariable','CreditcardsCollection','/ns3:CreditcardsCollection/ns3:Creditcards/ns3:creditLimit'))"/>
            <to variable="creditFault" part="CreditCheckFault"
                query="/ns4:CreditCheckFault/ns4:error"/>
          </copy>
        </assign>
        <reply name="Reply_ccerror" faultName="ns1:validateCCfault"
               variable="creditFault" partnerLink="checkcclimit_client"
               portType="ns1:creditcardvalidation"
               operation="validatecreditcard"/>
      </sequence>
    </catch>
  </faultHandlers>
  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
     ORCHESTRATION LOGIC                                               
     Set of activities coordinating the flow of messages across the    
     services integrated within this business process                  
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->
  <sequence name="main">

    <!-- Receive input from requestor. (Note: This maps to operation defined in CheckCCLimit.wsdl) -->
    <receive name="receiveInput" partnerLink="checkcclimit_client" portType="ns1:creditcardvalidation" operation="validatecreditcard" variable="inputVariable" createInstance="yes"/>
    <assign name="Assign_ccinfo">
      <copy>
        <from variable="inputVariable" part="CreditCheckRequest"
              query="/ns4:CreditCheckRequest/ns4:CCNumber"/>
        <to variable="Invoke_ccservice_CreditCardDBServiceSelect_InputVariable"
            part="CreditCardDBServiceSelect_inputParameters"
            query="/ns3:CreditCardDBServiceSelect_ccNumInputParameters/ns3:ccNum"/>
      </copy>
    </assign>
    <invoke name="Invoke_ccservice" bpelx:invokeAsDetail="no"
            inputVariable="Invoke_ccservice_CreditCardDBServiceSelect_InputVariable"
            outputVariable="Invoke_ccservice_CreditCardDBServiceSelect_OutputVariable"
            partnerLink="CreditCardDBService"
            portType="ns2:CreditCardDBService_ptt"
            operation="CreditCardDBServiceSelect"/>
    <assign name="Assign_ccstatus">
      <copy>
        <from variable="Invoke_ccservice_CreditCardDBServiceSelect_OutputVariable"
              part="CreditcardsCollection"
              query="/ns3:CreditcardsCollection/ns3:Creditcards/ns3:status"/>
        <to variable="outputVariable" part="CreditCheckResponse"
            query="/ns4:CreditCheckResponse/ns4:status"/>
      </copy>
    </assign>
    <switch name="Switch_cclimit">
      <case condition="bpws:getVariableData('outputVariable','CreditCheckResponse','/ns4:CreditCheckResponse/ns4:status') = 'VALID' and number(bpws:getVariableData('inputVariable','CreditCheckRequest','/ns4:CreditCheckRequest/ns4:amount')) > number(bpws:getVariableData('Invoke_ccservice_CreditCardDBServiceSelect_OutputVariable','CreditcardsCollection','/ns3:CreditcardsCollection/ns3:Creditcards/ns3:creditLimit'))">
        <bpelx:annotation>
          <bpelx:general>
            <bpelx:property name="userLabel">
              <![CDATA[Check status and limit]]>
            </bpelx:property>
          </bpelx:general>
        </bpelx:annotation>
        <throw name="Throw_validateccfault" faultName="ns1:validateCCfault"
               faultVariable="creditFault"/>
      </case>
    </switch>
    <!-- Generate reply to synchronous request -->
    <reply name="replyOutput" partnerLink="checkcclimit_client" portType="ns1:creditcardvalidation" operation="validatecreditcard" variable="outputVariable"/>
  </sequence>
</process>
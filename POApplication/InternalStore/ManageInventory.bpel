<?xml version = "1.0" encoding = "UTF-8" ?>
<!--
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  Oracle JDeveloper BPEL Designer 
  
  Created: Tue Mar 22 16:40:28 EDT 2016
  Author:  sunkr196
  Type: BPEL 1.1 Process
  Purpose: Asynchronous BPEL Process
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-->
<process name="ManageInventory"
         targetNamespace="http://xmlns.oracle.com/POApplication/InternalStore/ManageInventory"
         xmlns="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
         xmlns:client="http://xmlns.oracle.com/POApplication/InternalStore/ManageInventory"
         xmlns:ora="http://schemas.oracle.com/xpath/extension"
         xmlns:bpelx="http://schemas.oracle.com/bpel/extension"
         xmlns:bpws="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
         xmlns:ns1="http://xmlns.techlabs.local/oracle/apps"
         xmlns:bpel2="http://docs.oasis-open.org/wsbpel/2.0/process/executable"
         xmlns:ns2="http://xmlns.techlabs.local/oracle/apps/types/"
         xmlns:ns3="http://xmlns.techlabs.com/ns/StoreRequest"
         xmlns:ns4="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.Xpath20"
         xmlns:ns8="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.ExtFunc"
         xmlns:ns11="http://www.oracle.com/XSL/Transform/java/oracle.tip.dvm.LookupValue"
         xmlns:ns7="http://xmlns.oracle.com/bpel/workflow/xpath"
         xmlns:ns9="http://xmlns.oracle.com/bpel/services/IdentityService/xpath"
         xmlns:ns5="http://xmlns.oracle.com/bpmn20/extensions"
         xmlns:ns12="http://schemas.oracle.com/bpel/extension/xpath/function/xdk"
         xmlns:ns10="http://www.oracle.com/XSL/Transform/java/oracle.tip.xref.xpath.XRefXPathFunctions"
         xmlns:ns6="http://schemas.oracle.com/xpath/extension/ldap"
         xmlns:xsd="http://www.w3.org/2001/XMLSchema"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:ns13="/techlabs/common/">

    <!-- 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        PARTNERLINKS                                                      
        List of services participating in this BPEL process               
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    -->
    <bpelx:annotation>
        <bpelx:analysis>
            <bpelx:property name="wsdlFile">
                <![CDATA[ManageInventory.wsdl]]>
            </bpelx:property>
        </bpelx:analysis>
    </bpelx:annotation>
    <partnerLinks>
        <!-- 
      The 'client' role represents the requester of this service. It is 
      used for callback. The location and correlation information associated
      with the client role are automatically set using WS-Addressing.
    -->
        <partnerLink name="manageinventory_client" partnerLinkType="client:ManageInventory" myRole="ManageInventoryProvider" partnerRole="ManageInventoryRequester"/>
        <partnerLink name="InternalStoreService"
                     partnerLinkType="ns1:InternalStoreService"
                     partnerRole="InternalStoreService"/>
    </partnerLinks>

    <!-- 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        VARIABLES                                                        
        List of messages and XML documents used within this BPEL process 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    -->
    <variables>
        <!-- Reference to the message passed as input during initiation -->
        <variable name="inputVariable" messageType="client:ManageInventoryRequestMessage"/>

        <!-- Reference to the message that will be sent back to the requester during callback -->
        <variable name="outputVariable" messageType="client:ManageInventoryResponseMessage"/>
        <variable name="Invoke_checkinstore_getInternalStoreView1_InputVariable"
                  messageType="ns1:InternalStoreService_getInternalStoreView1"/>
        <variable name="Invoke_checkinstore_getInternalStoreView1_OutputVariable"
                  messageType="ns1:InternalStoreService_getInternalStoreView1Response"/>
        <variable name="n" type="xsd:int"/>
        <variable name="inStock" type="xsd:boolean"/>
        <variable name="operation" type="xsd:string"/>
        <variable name="Invoke_update_stock_updateInternalStoreView1_InputVariable"
                  messageType="ns1:InternalStoreService_updateInternalStoreView1"/>
        <variable name="Invoke_update_stock_updateInternalStoreView1_OutputVariable"
                  messageType="ns1:InternalStoreService_updateInternalStoreView1Response"/>
    </variables>

    <!-- 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
       ORCHESTRATION LOGIC                                               
       Set of activities coordinating the flow of messages across the    
       services integrated within this business process                  
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    -->
    <sequence name="main">
        <!-- Receive input from requestor. (Note: This maps to operation defined in ManageInventory.wsdl) -->
        <pick name="Pick_operation" createInstance="yes">
            <onMessage variable="inputVariable"
                       partnerLink="manageinventory_client"
                       portType="client:ManageInventory"
                       operation="checkStock">
                <assign name="Assign_checkstock">
                    <copy>
                        <from expression="'check'"/>
                        <to variable="operation"/>
                    </copy>
                </assign>
            </onMessage>
            <onMessage variable="inputVariable"
                       partnerLink="manageinventory_client"
                       portType="client:ManageInventory"
                       operation="acquireStock">
                <assign name="Assign_acquirestock">
                    <copy>
                        <from expression="'acquire'"/>
                        <to variable="operation"/>
                    </copy>
                </assign>
            </onMessage>
        </pick>
        <assign name="Assign_initialize">
            <copy>
                <from expression="true()"/>
                <to variable="inStock"/>
            </copy>
            <copy>
                <from expression="count(bpws:getVariableData('inputVariable','payload','/ns3:StoreRequest/ns3:product'))"/>
                <to variable="n"/>
            </copy>
        </assign>
        <while name="While"
               condition="bpws:getVariableData('n') > 0 and bpws:getVariableData('inStock') = true()">
            <sequence>
                <assign name="Assign_prodId">
                    <copy>
                        <from variable="inputVariable" part="payload"
                              query="/ns3:StoreRequest/ns3:product[position()=$n]/ns3:prodId"/>
                        <to variable="Invoke_checkinstore_getInternalStoreView1_InputVariable"
                            part="parameters"
                            query="/ns2:getInternalStoreView1/ns2:prodId"/>
                    </copy>
                </assign>
                <invoke name="Invoke_checkinstore" bpelx:invokeAsDetail="no"
                        inputVariable="Invoke_checkinstore_getInternalStoreView1_InputVariable"
                        outputVariable="Invoke_checkinstore_getInternalStoreView1_OutputVariable"
                        partnerLink="InternalStoreService"
                        portType="ns1:InternalStoreService"
                        operation="getInternalStoreView1"/>
                <switch name="Switch_operation">
                    <case condition="bpws:getVariableData('operation') = 'check'">
                        <bpelx:annotation>
                            <bpelx:general>
                                <bpelx:property name="userLabel">
                                    <![CDATA[operation=check]]>
                                </bpelx:property>
                            </bpelx:general>
                        </bpelx:annotation>
                        <assign name="Assign_prodinstock">
                            <copy>
                                <from expression="number(bpws:getVariableData('Invoke_checkinstore_getInternalStoreView1_OutputVariable','parameters','/ns2:getInternalStoreView1Response/ns2:result/ns13:Quantity')) - number(bpws:getVariableData('inputVariable','payload','/ns3:StoreRequest/ns3:product[position()=$n]/ns3:qtyOrdered')) >= 0"/>
                                <to variable="inStock"/>
                            </copy>
                        </assign>
                    </case>
                    <otherwise>
                        <sequence name="Sequence1">
                            <assign name="Assign_update_stock">
                                <copy>
                                    <from variable="inputVariable"
                                          part="payload"
                                          query="/ns3:StoreRequest/ns3:product[position()=$n]/ns3:prodId"/>
                                    <to variable="Invoke_update_stock_updateInternalStoreView1_InputVariable"
                                        part="parameters"
                                        query="/ns2:updateInternalStoreView1/ns2:internalStoreView1/ns13:ProdId"/>
                                </copy>
                                <copy>
                                    <from expression="number(bpws:getVariableData('Invoke_checkinstore_getInternalStoreView1_OutputVariable','parameters','/ns2:getInternalStoreView1Response/ns2:result/ns13:Quantity')) - number(bpws:getVariableData('inputVariable','payload','/ns3:StoreRequest/ns3:product[position()=$n]/ns3:qtyOrdered'))"/>
                                    <to variable="Invoke_update_stock_updateInternalStoreView1_InputVariable"
                                        part="parameters"
                                        query="/ns2:updateInternalStoreView1/ns2:internalStoreView1/ns13:Quantity"/>
                                </copy>
                            </assign>
                            <invoke name="Invoke_update_stock"
                                    bpelx:invokeAsDetail="no"
                                    inputVariable="Invoke_update_stock_updateInternalStoreView1_InputVariable"
                                    outputVariable="Invoke_update_stock_updateInternalStoreView1_OutputVariable"
                                    partnerLink="InternalStoreService"
                                    portType="ns1:InternalStoreService"
                                    operation="updateInternalStoreView1"/>
                        </sequence>
                    </otherwise>
                </switch>
                <assign name="Assign_next_n">
                    <copy>
                        <from expression="bpws:getVariableData('n') - 1"/>
                        <to variable="n"/>
                    </copy>
                </assign>
            </sequence>
        </while>
        <switch name="Switch_response">
            <case condition="bpws:getVariableData('operation')='check'">
                <bpelx:annotation>
                    <bpelx:general>
                        <bpelx:property name="userLabel">
                            <![CDATA[operation=check]]>
                        </bpelx:property>
                    </bpelx:general>
                </bpelx:annotation>
                <sequence>
                    <switch name="Switch_instock">
                        <case condition="bpws:getVariableData('inStock') = true()">
                            <bpelx:annotation>
                                <bpelx:general>
                                    <bpelx:property name="userLabel">
                                        <![CDATA[case InStock]]>
                                    </bpelx:property>
                                </bpelx:general>
                            </bpelx:annotation>
                            <assign name="Assign_instock">
                                <copy>
                                    <from expression="'in-stock'"/>
                                    <to variable="outputVariable" part="payload"
                                        query="/ns3:StoreResponse/ns3:status"/>
                                </copy>
                            </assign>
                        </case>
                        <otherwise>
                            <assign name="Assign_outofstock">
                                <copy>
                                    <from expression="'out-of-stock'"/>
                                    <to variable="outputVariable" part="payload"
                                        query="/ns3:StoreResponse/ns3:status"/>
                                </copy>
                            </assign>
                        </otherwise>
                    </switch>
                    <invoke name="callbackClient"
                            partnerLink="manageinventory_client"
                            portType="client:ManageInventoryCallback"
                            operation="checkStockResponse"
                            inputVariable="outputVariable"/>
                </sequence>
            </case>
            <otherwise>
                <sequence name="Sequence3">
                    <assign name="Assign_fulfilled">
                        <copy>
                            <from expression="'fulfilled'"/>
                            <to variable="outputVariable" part="payload"
                                query="/ns3:StoreResponse/ns3:status"/>
                        </copy>
                    </assign>
                    <invoke name="callbackClient_fulfilled"
                            bpelx:invokeAsDetail="no"
                            inputVariable="outputVariable"
                            partnerLink="manageinventory_client"
                            portType="client:ManageInventoryCallback"
                            operation="acquireStockResponse"/>
                </sequence>
            </otherwise>
        </switch>
        <!-- 
          Asynchronous callback to the requester. (Note: the callback location and correlation id is transparently handled using WS-addressing.)
        -->
    </sequence>
</process>
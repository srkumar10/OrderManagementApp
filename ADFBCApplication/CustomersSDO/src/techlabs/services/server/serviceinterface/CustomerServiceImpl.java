package techlabs.services.server.serviceinterface;

import java.lang.reflect.Method;

import java.math.BigDecimal;

import java.util.List;

import javax.ejb.Remote;
import javax.ejb.Stateless;

import javax.interceptor.Interceptors;

import oracle.jbo.common.Diagnostic;
import oracle.jbo.common.sdo.SDOHelper;
import oracle.jbo.common.service.types.FindControl;
import oracle.jbo.common.service.types.FindCriteria;
import oracle.jbo.common.service.types.ProcessControl;
import oracle.jbo.common.service.types.ProcessData;
import oracle.jbo.server.svc.ServiceContextInterceptor;
import oracle.jbo.server.svc.ServiceImpl;
import oracle.jbo.service.errors.ServiceException;

import oracle.webservices.annotations.PortableWebService;

import techlabs.services.common.serviceinterface.CustomerService;

import techlabs.views.common.AddressVOSDO;
import techlabs.views.common.CustomersVOSDO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Apr 16 10:33:00 EDT 2016
// ---------------------------------------------------------------------
@Stateless(name="techlabs.services.common.CustomerServiceBean", mappedName="CustomerServiceBean")
@Remote(CustomerService.class)
@PortableWebService(targetNamespace="/techlabs/services/common/customers",
    serviceName="CustomerService", portName="CustomerServiceSoapHttpPort",
    endpointInterface="techlabs.services.common.serviceinterface.CustomerService")
@Interceptors( { ServiceContextInterceptor.class })
public class CustomerServiceImpl extends ServiceImpl implements CustomerService {
    private static boolean _isInited = false;

    /**
     * This is the default constructor (do not remove).
     */
    public CustomerServiceImpl() {
        init();
        setApplicationModuleDefName("techlabs.services.CustomersSDOAppModule");
        setConfigurationName("CustomerService");
    }

    /**
     * Generated method. Do not modify. Do initialization in the constructor
     */
    protected void init() {
        if (_isInited) {
            return;
        }
        synchronized (CustomerServiceImpl.class) {
            if (_isInited) {
                return;
            }
            try {
                SDOHelper.INSTANCE.defineSchema("techlabs/services/common/serviceinterface/", "CustomerService.xsd");
                _isInited = true;
            } catch (Exception ex) {
                Diagnostic.printStackTrace(ex);
            }
        }
    }

    /**
     * getAddressVO1: generated method. Do not modify.
     */
    public AddressVOSDO getAddressVO1(BigDecimal addrId) throws ServiceException {
        return (AddressVOSDO)get(new Object[] { addrId }, "AddressVO1",
                                 AddressVOSDO.class);
    }

    /**
     * createAddressVO1: generated method. Do not modify.
     */
    public AddressVOSDO createAddressVO1(AddressVOSDO addressVO1) throws ServiceException {
        return (AddressVOSDO)create(addressVO1, "AddressVO1");
    }

    /**
     * updateAddressVO1: generated method. Do not modify.
     */
    public AddressVOSDO updateAddressVO1(AddressVOSDO addressVO1) throws ServiceException {
        return (AddressVOSDO)update(addressVO1, "AddressVO1");
    }

    /**
     * deleteAddressVO1: generated method. Do not modify.
     */
    public void deleteAddressVO1(AddressVOSDO addressVO1) throws ServiceException {
        delete(addressVO1, "AddressVO1");
    }

    /**
     * mergeAddressVO1: generated method. Do not modify.
     */
    public AddressVOSDO mergeAddressVO1(AddressVOSDO addressVO1) throws ServiceException {
        return (AddressVOSDO)merge(addressVO1, "AddressVO1");
    }

    /**
     * findAddressVO1: generated method. Do not modify.
     */
    public List<AddressVOSDO> findAddressVO1(FindCriteria findCriteria,
                                             FindControl findControl) throws ServiceException {
        return (List<AddressVOSDO>)find(findCriteria, findControl,
                                        "AddressVO1", AddressVOSDO.class);
    }

    /**
     * processAddressVO1: generated method. Do not modify.
     */
    public List<AddressVOSDO> processAddressVO1(String changeOperation,
                                                List<AddressVOSDO> addressVO1,
                                                ProcessControl processControl) throws ServiceException {
        return (List<AddressVOSDO>)process(changeOperation, processControl,
                                           addressVO1, "AddressVO1");
    }

    /**
     * processCSAddressVO1: generated method. Do not modify.
     */
    public ProcessData processCSAddressVO1(ProcessData processData,
                                           ProcessControl processControl) throws ServiceException {
        return processChangeSummary(processData, processControl, "AddressVO1");
    }

    /**
     * getCustomersVO1: generated method. Do not modify.
     */
    public CustomersVOSDO getCustomersVO1(BigDecimal custId) throws ServiceException {
        return (CustomersVOSDO)get(new Object[] { custId }, "CustomersVO1",
                                   CustomersVOSDO.class);
    }

    /**
     * createCustomersVO1: generated method. Do not modify.
     */
    public CustomersVOSDO createCustomersVO1(CustomersVOSDO customersVO1) throws ServiceException {
        return (CustomersVOSDO)create(customersVO1, "CustomersVO1");
    }

    /**
     * updateCustomersVO1: generated method. Do not modify.
     */
    public CustomersVOSDO updateCustomersVO1(CustomersVOSDO customersVO1) throws ServiceException {
        return (CustomersVOSDO)update(customersVO1, "CustomersVO1");
    }

    /**
     * deleteCustomersVO1: generated method. Do not modify.
     */
    public void deleteCustomersVO1(CustomersVOSDO customersVO1) throws ServiceException {
        delete(customersVO1, "CustomersVO1");
    }

    /**
     * mergeCustomersVO1: generated method. Do not modify.
     */
    public CustomersVOSDO mergeCustomersVO1(CustomersVOSDO customersVO1) throws ServiceException {
        return (CustomersVOSDO)merge(customersVO1, "CustomersVO1");
    }

    /**
     * findCustomersVO1: generated method. Do not modify.
     */
    public List<CustomersVOSDO> findCustomersVO1(FindCriteria findCriteria,
                                                 FindControl findControl) throws ServiceException {
        return (List<CustomersVOSDO>)find(findCriteria, findControl,
                                          "CustomersVO1",
                                          CustomersVOSDO.class);
    }

    /**
     * processCustomersVO1: generated method. Do not modify.
     */
    public List<CustomersVOSDO> processCustomersVO1(String changeOperation,
                                                    List<CustomersVOSDO> customersVO1,
                                                    ProcessControl processControl) throws ServiceException {
        return (List<CustomersVOSDO>)process(changeOperation, processControl,
                                             customersVO1, "CustomersVO1");
    }

    /**
     * processCSCustomersVO1: generated method. Do not modify.
     */
    public ProcessData processCSCustomersVO1(ProcessData processData,
                                             ProcessControl processControl) throws ServiceException {
        return processChangeSummary(processData, processControl, "CustomersVO1");
    }
}
